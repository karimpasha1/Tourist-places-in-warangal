#include<stdio.h> 
 #include<stdlib.h> 
 #include<string.h> 
 #include<windows.h> 
 #include<conio.h> 
 #define MAX_PLACES 10 
  
 //structure to hold torist place informtion like, place name, location, distance etc... 
 struct place 
 { 
  char name[500]; 
  char location[500]; 
  float ticket_price; 
  float distance; 
 }; 
 void user_main(); 
 //List of tourist places 
 struct place places[MAX_PLACES]={ 
 {"thousand pillar temple","hanamakonda",500.0,2.0}, 
 {"bhadrakali temple","hanamakonda",250.0,3.0}, 
 {"warangal fort","warangal",130.0,1.5}, 
 {"kakatiya musical garden","hanamakonda",210.0,3.0}, 
 {"kakatiya rock garden","hanamakonda",320.0,2.5}, 
 {"kakatiya zological park","hanamakonda",520.0,3.0}, 
 {"ramappa temple","hanamakonda",50.0,7.0}, 
 {"ramappa lake","hanamakonda",320.0,5.0}, 
 {"srividya saraswathi shani temple","hanamakonda",30.0,2.0}, 
 {"kulpakji","warangal",100.0,3.0} 
 }; 
  
  
 //Print all tourist places 
 
 
 void print_all_places() 
 { 
  int i=0; 
  int n=MAX_PLACES; 
  for(i=0;i<n;i++) 
 { 
 printf("place name:%s \n",places[i].name); 
 printf("\t location:%s \n",places[i].location); 
 printf("\t ticket_price:%f Rupees \n",places[i].ticket_price); 
 printf("\t distance from a city:%f KMs \n",places[i].distance); 
 printf("\n \n"); 
 } 
 } 
  
 //search tourist place with given name in the list  
 search_places_with_name(char*search_name) 
 { 
  int i=0; 
  int n=MAX_PLACES; 
  int found = 0; 
  
  for(i=0;i<n;i++) 
 { 
  if(strcmp(search_name,places[i].name)!=0) 
 { 
  continue; 
 } 
 printf("place name:%s \n",places[i].name); 
 printf("\t location:%s \n",places[i].location); 
 printf("\t ticket_price:%f Rupees \n",places[i].ticket_price); 
 printf("\t distance from a city:%f KMs \n",places[i].distance); 
 printf("\n\n"); 
 found = 1; 
 } 
 
 
  
  if(0 == found) 
 printf("Given place '%s' is not found.\n", search_name); 
 } 
  
 //search tourist place with given location in the list 
 search_places_with_location(char*search_location) 
 { 
  int i=0; 
  int n=MAX_PLACES; 
  int found = 0; 
  for(i=0;i<n;i++) 
 { 
  if(strcmp(search_location,places[i].location)!=0) 
 { 
  continue; 
 } 
 printf("place name:%s \n",places[i].name); 
 printf("\t location:%s \n",places[i].location); 
 printf("\t ticket_price:%f Rupees \n",places[i].ticket_price); 
 printf("\t distance from a city:%f KMs \n",places[i].distance); 
 printf("\n \n"); 
 found = 1; 
 } 
  if(0 == found) 
 printf("Given location '%s' is not found.\n", search_location); 
 } 
  
 //search tourist place with given distance in the list 
 search_places_with_distance(float search_distance) 
 { 
  int i=0; 
  int n=MAX_PLACES; 
  int found = 0; 
 
 
  for(i=0;i<n;i++) 
 { 
  if(search_distance!=places[i].distance) 
 { 
  continue; 
 } 
 printf("place name:%s \n",places[i].name); 
 printf("\t location:%s \n",places[i].location); 
 printf("\t ticket_price:%f Rupees \n",places[i].ticket_price); 
 printf("\t distance from a city:%f KMs \n",places[i].distance); 
 printf("\n \n"); 
 found = 1; 
 } 
  if(0 == found) 
 printf("Given distance '%f' is not found.\n", search_distance); 
 } 
  
 //search tourist place with given ticket price in the list 
 search_places_with_ticket_price(float search_ticket_price) 
 { 
  int i=0; 
  int n=MAX_PLACES; 
  int found = 0; 
  for(i=0;i<n;i++) 
 { 
  if(search_ticket_price!=places[i].ticket_price) 
 { 
  continue; 
 } 
 printf("place name:%s \n",places[i].name); 
 printf("\t location:%s \n",places[i].location); 
 printf("\t ticket_price:%f Rupees \n",places[i].ticket_price); 
 printf("\t distance from a city:%f KMs \n",places[i].distance); 
 printf("\n \n"); 
 
 
 found = 1; 
 } 
  if(0 == found) 
 printf("Given ticket_price '%f' is not found.\n", search_ticket_price); 
 } 
  
 //Sort the tourist places with place name 
 sort_place_with_name() 
 { 
  int j,i=0; 
  struct place temp; 
  
  int n=MAX_PLACES; 
  for(i=0;i<n;i++) 
 { 
  for(j=i+1;j<n;j++) 
 { 
  if(strcmp(places[i].name,places[j].name)>0) 
 { 
  temp = places[i]; 
  places[i] = places[j]; 
  places[j] = temp; 
 } 
 } 
 } 
 print_all_places(); 
 } 
  
 //Sort the tourist places with location name 
 sort_place_with_location() 
 { 
  int j,i=0; 
  struct place temp; 
  int n=MAX_PLACES; 
 
 
  for(i=0;i<n;i++) 
 { 
  for(j=i+1;j<n;j++) 
 { 
  if(strcmp(places[i].location,places[j].location)>0) 
 { 
  temp = places[i]; 
  places[i] = places[j]; 
  places[j] = temp; 
 } 
 } 
 } 
 print_all_places(); 
 } 
  
 //Sort the tourist places with distance 
 sort_place_with_distance() 
 { 
  int j,i=0; 
  struct place temp; 
  int n=MAX_PLACES; 
  for(i=0;i<n;i++) 
 { 
  for(j=i+1;j<n;j++) 
 { 
  if(places[i].distance>places[j].distance) 
 { 
  temp = places[i]; 
  places[i] = places[j]; 
  places[j] = temp; 
 } 
 } 
 } 
 print_all_places(); 
 
 
 } 
  
 //Sort the tourist places with ticket price 
 sort_place_with_ticket_price() 
 { 
  int j,i=0; 
  struct place temp; 
  int n=MAX_PLACES; 
   
  for(i=0;i<n;i++) 
  { 
   for(j=i+1;j<n;j++) 
   { 
    if(places[i].ticket_price>places[j].ticket_price) 
    { 
  temp = places[i]; 
  places[i] = places[j]; 
  places[j] = temp; 
    } 
   } 
  } 
  print_all_places(); 
 } 
 //LOGIN  
int login(){ 
 char profile1[2][20]={"touristplaces","0000"}; 
 int c,f,u,p; 
 char uname[30],ch,pwd[30]; 
     login: 
     f=0; 
   do 
 { 
 printf("\n\n Login Form.....");  
 printf("\n\n Enter User Name : "); 
 
 
 scanf("%s",uname); 
 printf("\n \nEnter Password : "); 
 while((ch=getch())!='\r') 
 { 
      pwd[f++]=ch; 
      ch='*'; 
     printf("%c",ch); 
 } 
 pwd[f]='\0'; 
 u=strcmp(uname,profile1[0]); 
 p=strcmp(pwd,profile1[1]); 
 printf("\n\n Please wait Credential Verification is in Process...."); 
 Sleep(5000); 
 system("cls"); 
 if(u==0&&p==0) 
 { 
  printf("\n WARANGAL TOURIST PLACES::...................................\n"); 
  user_main(); 
  return(0); 
 } 
 else 
 { 
  printf("\n\n Credentials are wrong.....please try again....."); 
  c++; 
  printf("\n\n Left %d attempts",3-c); 
 }  
}while(c<3); 
} 
//REGISTRATION 
int signin(){ 
 int a,c,p; 
 char rname[30],runame[30],profile[2][20],ch1,pass[20],f,ch2,repass[20]; 
 char loginpro[2][20],uname[30],ch,pwd[20]; 
 FILE *fptr; 
 
 
 fptr=fopen("tourist.txt","w+"); 
 printf("\n ------------WARANGAL TOURIST PLACES LIST---------------"); 
 printf("\n NAME \t\t:"); 
 scanf("%s",rname); 
 printf("\n USER NAME(no special characters allowed):"); 
 scanf("%s",runame); 
 strcpy(profile[0],runame); 
 pw: 
 printf("\n PASS WORD \t:"); 
 while((ch1=getch())!='\r') 
 { 
      pass[f++]=ch1; 
      ch1='*'; 
     printf("%c",ch1); 
 } 
 pass[f]='\0'; 
 strcpy(profile[1],pass); 
 printf("\n PASS WORD (re enter as above)"); 
 while((ch2=getch())!='\r') 
 { 
      repass[f++]=ch2; 
      ch2='*'; 
      printf("%c",ch2); 
 } 
 repass[f]='\0'; 
 int u=strcmp(pass,repass); 
 if(u!=0) 
  { 
   printf("\n\n storing the details..........."); 
   printf("\n\n REGISTRATION DONE SUCCESSFULL........."); 
   for(a=0;a<5;a++) 
   { 
    strcpy(profile[f],loginpro[f]); 
   } 
 
 
 fprintf(fptr,"NAME=%s \n USER NAME=%d ,\n 
PASSWORD=%d",rname,runame,pass);// to not to understand the data by the others in 
.txt file i have stored my data in integer format  
 fclose(fptr); 
   f=0; 
   system("cls"); 
   do 
 { 
 printf("\n\n Login Form.....");  
 printf("\n\n Enter User Name : "); 
 scanf("%s",uname); 
 printf("\n \nEnter Password : "); 
 while((ch=getch())!='\r') 
 { 
      pwd[f++]=ch; 
      ch='*'; 
     printf("%c",ch); 
 } 
 pwd[f]='\0'; 
 u=strcmp(uname,profile[0]); 
 p=strcmp(pwd,profile[1]); 
 printf("\n\n Please wait Credential Verification is in Process...."); 
 Sleep(3); 
 system("cls"); 
 if(u==0&&p==0) 
 { 
  printf("\n WARANGAL TOURIST PLACES::...................................\n"); 
  user_main(); 
  //void user_main(); 
  return(0); 
 } 
 else 
 { 
  printf("\n\n Credentials are wrong.....please try again....."); 
  c++; 
 
 
  printf("\n\n Left %d attempts",3-c); 
 }  
}while(c<3); 
   return(0); 
  } 
 else 
  { 
  printf("\n enter the valid password "); 
  goto pw;   
  } 
}  
  
  
 //main function of an application 
 void user_main() 
 { 
  int option; 
  char search_place[100]; 
  char search_location[100]; 
  float search_distance; 
  float search_ticket_price; 
 while(1) 
 { 
  
 //while to to list all possible options to user on tourist places 
  
 printf("press 1 to list all tourist places in warangal \n"); 
 printf("press 2 to search given tourist places in warangal by name \n"); 
 printf("press 3 to search given tourist places in warangal by location \n"); 
 printf("press 4 to search given tourist places in warangal by distance \n"); 
 printf("press 5 to search given tourist places in warangal by ticket_price \n"); 
 printf("press 6 to sort given tourist places in warangal by name \n"); 
 printf("press 7 to sort given tourist places in warangal by location \n"); 
 printf("press 8 to sort given tourist places in warangal by distance \n"); 
 
 
 printf("press 9 to sort given tourist places in warangal by ticket_price \n"); 
 printf("press 0 to exit the application:\n"); 
  
 printf("please select an option : "); 
  
 //to read user selected option 
 scanf("%d",&option); 
  
 //To read extra new line character in above input 
 getchar(); 
  switch(option) 
  
 { 
  case 1: 
         print_all_places();  
   break; 
  case 2: 
          printf("enter place name to search : "); 
           
          //To read input till new line character, so that it will accept name with spaces 
       scanf("%[^\n]", search_place); 
       search_places_with_name(search_place); 
   break; 
     case 3: 
         printf("enter place location to search : "); 
   scanf("%[^\n]",search_location); 
   search_places_with_location(search_location); 
   break; 
  case 4: 
      printf("enter place distance to search : "); 
   scanf("%f",&search_distance); 
   search_places_with_distance(search_distance); 
   break; 
  case 5: 
 
 
      printf("enter place ticket_price to search : "); 
   scanf("%f",&search_ticket_price); 
   search_places_with_ticket_price(search_ticket_price); 
   break; 
  case 6: 
       sort_place_with_name(); 
   break; 
   case 7: 
       sort_place_with_location(); 
       break; 
  case 8: 
       sort_place_with_distance(); 
   break; 
  case 9: 
       sort_place_with_ticket_price(); 
   break; 
  case 0: 
       printf("existing application:\n"); 
       //to exit an application 
   exit(0);//Returning successfully// 
  default: 
   printf("entered invalid option:\n"); 
   break; 
 } 
 } 
} 
